---

# You can copy this file to `vaulted_vars/secrets` after editing its values.
# I strongly recommend encrypting this file in some way.
#
# To encrypt this file you can use Ansible vault and/or git-crypt or whatever
# you want.
#
# BEWARE: these are just dummy keys and tokens I generated for this example. You
# SHOULD NOT use them for your deployment.
#
# A part from the IP addresses and peer names, you SHOULD NOT keep any of the
# values given in this file.
#
# Instead, you should generate new ones as explained.

secrets:
  # Basic authentication token for:
  #   - Traefik dashboard
  #   - Uploading a file to the file sharing service
  #   - Uploading a new paste to our Privatebin service
  #
  # All these authentication token represent the same username and password
  # combination: 
  #   - Username: test
  #   - Password: password
  #
  # To generate a token for yourself you can use the `htpasswd` command in the
  # Apache tools like this for example:
  #
  #   $ htpasswd -n <username>
  #
  #   or
  #
  #   $ htpasswd -nb <username> <password>
  traefik:
    auth_token: 'test:$apr1$KhC4drkf$JpKD/lN6nyNYnzXDJwA0k.'
  files:
    auth_token: 'test:$apr1$HlUUTrHF$PzL0ADCGcmcU1S6PEl4Yl.'
  paste:
    auth_token: 'test:$apr1$6VVhj3Za$G9TCphV6ZX4S/EDpfWJUy/'

  # Server and peer configurations for the Wireguard VPN
  # For the server and each peer you will need to generate a pair containing a
  # private key and a public key.
  # To do this easily, you can use the `wg` command from the Wireguard tools
  # like this:
  #
  #   $ wg genkey | tee private.key | wg pubkey > public.key
  #
  # For each peer, you will also need a preshared key that you can generate with
  # the `wg` command as well like this:
  #   
  #   $ wg genpsk
  #
  # The server's address selects the subnet to use for the VPN peers.
  #
  # The peer's addresses are their addresses on the subnet and there name is the
  # name to use to store the client configuration file.
  wireguard:
    server:
      # The subnet the VPN will be active on
      address: '10.0.0.1/24'
      private_key: 'ODHLv4ZCACfPjvXdB1dCcrpoDtCl2tNiagqNhOAbb0I='
      public_key: '5tpC3Ca0ELsOUQvuD4NHQc3LDklvDKmgt6aCbNYMRn4='
    peers:
      - name: 'my-phone'
        address: '10.0.0.2/32'
        private_key: 'iMgoCvv+zB+9AqzSccPKM7G0W5Cp6sZ+xeDB2trjoks='
        public_key: 'Gu21bhBi4FdcWx09btEiP1QULPHD1BwYtxBYrx/ud2s='
        preshared_key: '+hXEw6fUpOi6Lvqxuotp5HlRUqqB6exXpyqqed/OlzA='

      - name: 'my-laptop'
        address: '10.0.0.3/32'
        private_key: 'EO4eOBc3Y2q06VkG2Xv3DWj5kGQ6H1Ylhg7HG3lkkng='
        public_key: 'OJLYi4wajcCvz1dAK8E11fUi9/kHIAOhiEKx7A/ADgI='
        preshared_key: 'ohcD+p5G8oJSzkRm37yc4KqwnttfP04gVXeFsNjbp68='

  # This is the client id and secret given by GitLab when creating the OAuth
  # application refering to JupyterHub.
  #
  # The callback URL of the created application should be:
  #    https://jupyterhub.your.tld/hub/oauth_callback
  #
  # For all of this to work smoothly, you should give the OAuth application th
  # following scopes in GitLab:
  #   - api
  #   - read_user
  #   - openid
  #   - profile
  #   - email
  #
  #   For help, you can check out:
  #     https://docs.gitlab.com/ee/integration/oauth_provider.html#adding-an-application-through-the-profile
  #
  #   You can add the application as a normal user or as an admin. If you do it
  #   as an admin, it will be available for all your GitLab users.
  jupyterhub:
    client_id: 'e8236cee41039e65aa6e00194c8c3c677b48833532c2b1a7bf9064660ca2f559'
    client_secret: '16a4112ecbe28ddb4bd9da3f8896fae6a2934022fa95937bd02338d4576828aa'
